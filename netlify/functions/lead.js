// netlify/functions/lead.js
// DEBUG-–≤–µ—Ä—Å–∏—è: –ø–∏—à–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ Function logs, –Ω–æ —Ç–æ–∫–µ–Ω –Ω–µ –≤—ã–≤–æ–¥–∏—Ç.

export async function handler(event) {
  // 1) –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ POST
  if (event.httpMethod !== "POST") {
    console.log("[lead] Wrong method:", event.httpMethod);
    return { statusCode: 405, body: "Method Not Allowed" };
  }

  // 2) –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const IDS_RAW = process.env.RECIPIENT_IDS || "";
  const IDS = IDS_RAW.split(",").map(s => s.trim()).filter(Boolean);

  if (!TOKEN) {
    console.error("[lead] Missing TELEGRAM_BOT_TOKEN env var");
    return { statusCode: 500, body: "Missing token" };
  }
  if (!IDS.length) {
    console.error("[lead] Missing RECIPIENT_IDS env var");
    return { statusCode: 500, body: "No recipients" };
  }

  // 3) –†–∞–∑–±–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const hdr = k => event.headers[k] || event.headers[k.toLowerCase()] || "";
  const ct = hdr("content-type");
  const isJSON = (ct || "").includes("application/json");

  let data = {};
  try {
    if (isJSON) {
      data = JSON.parse(event.body || "{}");
    } else {
      // application/x-www-form-urlencoded –∏–ª–∏ multipart/form-data
      const p = new URLSearchParams(event.body || "");
      for (const [k, v] of p.entries()) data[k] = v;
    }
  } catch (e) {
    console.error("[lead] Body parse error:", e.message);
  }

  // 4) –ê–Ω—Ç–∏–±–æ—Ç-–ø–æ–ª–µ (honeypot). –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º.
  if (data["bot-field"]) {
    console.log("[lead] Honeypot caught. Skip.");
    return { statusCode: 200, body: "ok" };
  }

  // 5) –ì–æ—Ç–æ–≤–∏–º –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–ª—è
  const payload = {
    name: (data.name || data["name surname"] || "").trim(),
    whatsapp: (data.whatsapp || "").trim(),
    preferred: (data.preferred || "").trim(),
    comment: (data.comment || "").trim(),
    utm_source: (data.utm_source || "").trim(),
    utm_medium: (data.utm_medium || "").trim(),
    utm_campaign: (data.utm_campaign || "").trim(),
    utm_content: (data.utm_content || "").trim(),
    ref: (data.ref || "").trim(),
    form: (data["form-name"] || "").trim(),
  };

  // –ó–Ω–∞—á–µ–Ω–∏–µ ref –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–∞–∫ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å ("Janna")
  if (!payload.ref) payload.ref = "Janna";

  // 6) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ Telegram
  const lines = [];
  lines.push("üü° <b>–ù–æ–≤—ã–π –ª–∏–¥ LemonMall</b>");
  if (payload.name)      lines.push(`–ò–º—è: <b>${escape(payload.name)}</b>`);
  if (payload.whatsapp)  lines.push(`WhatsApp: <b>${escape(payload.whatsapp)}</b>`);
  if (payload.preferred) lines.push(`–ö–∞–Ω–∞–ª: <b>${escape(payload.preferred)}</b>`);
  if (payload.comment)   lines.push(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${escape(payload.comment)}`);
  lines.push(
    `UTM: ${escape(payload.utm_source || "")}/${escape(payload.utm_medium || "")}/${escape(payload.utm_campaign || "")}/${escape(payload.utm_content || "")}`
  );
  lines.push(`Ref: ${escape(payload.ref)}`);
  const text = lines.join("\n");

  // 7) –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
  console.log("[lead] Parsed payload keys:", Object.keys(payload));
  console.log("[lead] Recipients count:", IDS.length);
  console.log("[lead] Content-Type:", ct);

  // 8) –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  try {
    const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

    // —à–ª—ë–º –≤—Å–µ–º chat_id –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.allSettled(
      IDS.map(chat_id =>
        fetch(url, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id,
            text,
            parse_mode: "HTML",
            disable_web_page_preview: true
          }),
        }).then(async r => {
          const bodyText = await r.text();
          console.log(`[lead] TG to ${chat_id} ‚Üí ${r.status} ${bodyText}`);
          if (!r.ok) throw new Error(`TG ${r.status}: ${bodyText}`);
          return true;
        })
      )
    );

    const failed = results.filter(r => r.status === "rejected");
    if (failed.length) {
      console.error("[lead] Some TG sends failed:", failed.map(f => f.reason?.message || "Error"));
      return { statusCode: 500, body: "Telegram send failed" };
    }

    // 9) –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /thanks
    return {
      statusCode: 302,
      headers: { Location: "/thanks" }
    };
  } catch (e) {
    console.error("[lead] Lead processing failed:", e.message);
    return { statusCode: 500, body: "Lead processing failed" };
  }
}

// –ø—Ä–æ—Å—Ç–∞—è —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è HTML
function escape(s) {
  return String(s).replace(/[<>&"]/g, ch => ({
    "<": "&lt;", ">": "&gt;", "&": "&amp;", '"': "&quot;"
  }[ch]));
}
